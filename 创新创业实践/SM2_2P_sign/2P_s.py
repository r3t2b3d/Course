import socket
from hashlib import sha256

buffer_size = 4028

p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
a = 0x0000000000000000000000000000000000000000000000000000000000000000
b = 0x0000000000000000000000000000000000000000000000000000000000000007
Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
Gy = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8
ord_ = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141

F = GF(p)
E = EllipticCurve(F, [a, b])
G = E(Gx, Gy)

socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.bind(('127.0.0.1', 7777))
socket.listen(1)

conn, addr = socket.accept()
conn.send(b'Begin SM2 two-party sign? y/n')

data = conn.recv(100)
if data == b'n':
    conn.send('bye')
    socket.close()

d1 = randint(1, ord_-1)
P1 = inverse_mod(d1, ord_)*G
conn.send(str(P1.xy()).encode())

Z = b'Alice'
msg = b'test_msg'
e = int(sha256(Z+msg).hexdigest(), 16)
k1 = randint(1, ord_-1)
Q1 = k1*G

conn.send(str(e).encode())
conn.send(str(Q1.xy()).encode())

r = int(conn.recv(buffer_size))
s2 = int(conn.recv(buffer_size))
s3 = int(conn.recv(buffer_size))
s = (d1*k1*s2+d1*s3-r)%ord_

print("signature :", (r, s))

conn.close()
socket.close()


"""
from hashlib import sha256

p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
a = 0x0000000000000000000000000000000000000000000000000000000000000000
b = 0x0000000000000000000000000000000000000000000000000000000000000007
Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
Gy = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8
ord_ = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141

F = GF(p)
E = EllipticCurve(F, [a, b])
G = E(Gx, Gy)


def ver(sig, pk, msg, Z):
    x = ZZ((sig[1]*G+sig[1]*pk+sig[0]*pk).xy()[0])
    e = int(sha256(Z+msg).hexdigest(), 16)
    if (x+e)%ord_ == sig[0]:
        return True
    return False

sig = (31307560017302985721138653453184943327419089488701321546164626694008823014988, 69623941045154893466169853819169504375310974533558489293988994663334253615459)
pk = E(6496291364447780596933144322518283314055871112838673593310732284106666741710, 73279099192725378952392893099556444238854765124013803972089552657329614616791)
Z = b'Alice'
msg = b'test_msg'
ver(sig, pk, msg, Z)
"""

