import Crypto.Cipher.AES as AES
from Crypto.Util.Padding import pad, unpad
import os
import time

s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


def matrix2bytes(s):
    m = b''
    for i in range(4):
        m += bytes(s[i])
    return m


def bytes2matrix(s):
    m = list(s)
    return [m[4*i:4*i+4] for i in range(4)]


def transform(a):
    assert len(a) == 4
    assert len(a[0]) == 4
    res = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    for j in range(4):
        for i in range(4):
            res[j][i] = a[i][j]
    return res


def add_round_key(s, k):
    return [[x ^ y for x, y in zip(s[i], k[i])] for i in range(4)]


def sub_bytes(s):
    return [[s_box[item] for item in s[i]] for i in range(4)]


def inv_sub_bytes(s):
    return [[inv_s_box[item] for item in s[i]] for i in range(4)]


def shift_rows(s):
    for i in range(4):
        s[i] = s[i][i:]+s[i][:i]
    return s


def inv_shift_rows(s):
    for i in range(4):
        s[i] = s[i][-i:]+s[i][:-i]
    return s


x0time = lambda x: x
x1time = lambda x: ((x << 1) ^ 0x1B) & 0xFF if x & 0x80 else x << 1
x2time = lambda x: x1time(x1time(x))
x3time = lambda x: x1time(x1time(x1time(x)))
f1 = lambda x: x0time(x) ^ x1time(x)
f2 = lambda x: x3time(x) ^ x2time(x) ^ x1time(x)
f3 = lambda x: x3time(x) ^ x1time(x) ^ x0time(x)
f4 = lambda x: x3time(x) ^ x0time(x)
f5 = lambda x: x3time(x) ^ x2time(x) ^ x0time(x)


def mix_single_column(a):
    res = [0]*4
    res[0] = x1time(a[0]) ^ f1(a[1]) ^ a[2] ^ a[3]
    res[1] = a[0] ^ x1time(a[1]) ^ f1(a[2]) ^ a[3]
    res[2] = a[0] ^ a[1] ^ x1time(a[2]) ^ f1(a[3])
    res[3] = f1(a[0]) ^ a[1] ^ a[2] ^ x1time(a[3])
    return res


def inv_mix_single_column(a):
    res = [0] * 4
    res[0] = f2(a[0]) ^ f3(a[1]) ^ f5(a[2]) ^ f4(a[3])
    res[1] = f4(a[0]) ^ f2(a[1]) ^ f3(a[2]) ^ f5(a[3])
    res[2] = f5(a[0]) ^ f4(a[1]) ^ f2(a[2]) ^ f3(a[3])
    res[3] = f3(a[0]) ^ f5(a[1]) ^ f4(a[2]) ^ f2(a[3])
    return res


def mix_columns(s):
    mix_res = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    for i in range(4):
        res = mix_single_column([s[j][i] for j in range(4)])
        mix_res[0][i] = res[0]
        mix_res[1][i] = res[1]
        mix_res[2][i] = res[2]
        mix_res[3][i] = res[3]
    return mix_res


def inv_mix_columns(s):
    inv_mix_res = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    for i in range(4):
        res = inv_mix_single_column([s[j][i] for j in range(4)])
        inv_mix_res[0][i] = res[0]
        inv_mix_res[1][i] = res[1]
        inv_mix_res[2][i] = res[2]
        inv_mix_res[3][i] = res[3]
    return inv_mix_res


def key_expand(master_key: bytes, n_round=10):
    key_list = bytes2matrix(master_key)
    r_con = (
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
    )
    while len(key_list) < 4*(n_round+1):
        time = len(key_list)
        if time % 4 == 0:
            temp = key_list[-1][1:]+key_list[-1][:1]
            temp = [s_box[i] for i in temp]
            temp[0] ^= r_con[time//4-1]
        else:
            temp = key_list[-1]
        temp = [i ^ j for i, j in zip(temp, key_list[-4])]
        key_list.append(temp)
    return key_list


def encrypt(plain_text, master_key, n_round=10):
    real_key = key_expand(master_key)
    m_matrix = transform(bytes2matrix(plain_text))
    m_matrix = add_round_key(m_matrix, transform(real_key[:4]))
    for i in range(1, n_round):
        m_matrix = sub_bytes(m_matrix)
        m_matrix = shift_rows(m_matrix)
        m_matrix = mix_columns(m_matrix)
        m_matrix = add_round_key(m_matrix, transform(real_key[4 * i:4 * i + 4]))
    m_matrix = sub_bytes(m_matrix)
    m_matrix = shift_rows(m_matrix)
    m_matrix = add_round_key(m_matrix, transform(real_key[-4:]))
    return matrix2bytes(transform(m_matrix))


def decrypt(cipher_text, master_key, n_round=10):
    real_key = key_expand(master_key)
    c_matrix = transform(bytes2matrix(cipher_text))
    c_matrix = add_round_key(c_matrix, transform(real_key[-4:]))
    for i in range(n_round-1, 0, -1):
        c_matrix = inv_shift_rows(c_matrix)
        c_matrix = inv_sub_bytes(c_matrix)
        c_matrix = add_round_key(c_matrix, transform(real_key[4*i:4*i+4]))
        c_matrix = inv_mix_columns(c_matrix)
    c_matrix = inv_shift_rows(c_matrix)
    c_matrix = inv_sub_bytes(c_matrix)
    c_matrix = add_round_key(c_matrix, transform(real_key[:4]))
    return matrix2bytes(transform(c_matrix))


def test():
    BLOCKSIZE = 16
    key = os.urandom(16)
    aes = AES.new(key, mode=AES.MODE_ECB)
    m = pad(b'hash_hash', BLOCKSIZE)
    c1 = encrypt(m, key)
    c2 = aes.encrypt(m)
    print(c1)
    assert c1 == c2
    m1 = unpad(decrypt(c1, key), BLOCKSIZE)
    m2 = unpad(aes.decrypt(c2), BLOCKSIZE)
    assert m1 == m2
    print(m1)


if __name__ == '__main__':
    start = time.time()
    test()
    end = time.time()
    print(f'cost {end-start} s')

